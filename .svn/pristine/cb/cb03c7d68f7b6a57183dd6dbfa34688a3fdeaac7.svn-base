/*********************************************************************************************************//**
 * @file    IAP/IAP_Text/Src_AP/main.c
 * @version $Rev:: 4724         $
 * @date    $Date:: 2020-04-07 #$
 * @brief   The main program of IAP example.
 *************************************************************************************************************
 * @attention
 *
 * Firmware Disclaimer Information
 *
 * 1. The customer hereby acknowledges and agrees that the program technical documentation, including the
 *    code, which is supplied by Holtek Semiconductor Inc., (hereinafter referred to as "HOLTEK") is the
 *    proprietary and confidential intellectual property of HOLTEK, and is protected by copyright law and
 *    other intellectual property laws.
 *
 * 2. The customer hereby acknowledges and agrees that the program technical documentation, including the
 *    code, is confidential information belonging to HOLTEK, and must not be disclosed to any third parties
 *    other than HOLTEK and the customer.
 *
 * 3. The program technical documentation, including the code, is provided "as is" and for customer reference
 *    only. After delivery by HOLTEK, the customer shall use the program technical documentation, including
 *    the code, at their own risk. HOLTEK disclaims any expressed, implied or statutory warranties, including
 *    the warranties of merchantability, satisfactory quality and fitness for a particular purpose.
 *
 * <h2><center>Copyright (C) Holtek Semiconductor Inc. All rights reserved</center></h2>
 ************************************************************************************************************/

/* Includes ------------------------------------------------------------------------------------------------*/
#include "ht32.h"
#include "ht32_board.h"
#include "ht32_board_configs.h"

#include "gpio_init.h"
#include "uart0_init.h"
#include "usart0_init.h"
#include "string.h"
#include "motor_init.h"
#include "ht32_board_config.h"
#include "gptm0_init.h"
#include "ht32f5xxxx_rstcu.h"
#include "rtc_init.h"
#include "systick_init.h"
#include "save_all_setting.h"
#include "adc_init.h"
#include "tst_function.h"
#include "bftm_init.h"
#include "low_power_iniit.h"
#include "protocol.h"
#include "mcu_api.h"
#include "system.h"
#include "main_callfun.h"
//#include "stdio.h"


int fput(int ch,FILE*f)
{
	USART_SendData(HT_USART0,ch);
	while (USART_GetFlagStatus(HT_USART0, USART_FLAG_TXC) == RESET);
	return ch;
}
/* Global functions ----------------------------------------------------------------------------------------*/
/*********************************************************************************************************//**
  * @brief  Main program.
  * @retval None
  ***********************************************************************************************************/

	void clock_config(void)
{
#if 1
	CKCU_PeripClockConfig_TypeDef CKCUClock = {{ 0 }};
	//CKCUClock.Bit.ADC0		= 1;
	CKCUClock.Bit.ADC		= 1;
	CKCUClock.Bit.PDMA		= 0;
	CKCUClock.Bit.USBD		= 0;
	CKCUClock.Bit.CKREF		= 0;
	CKCUClock.Bit.EBI		= 0;
	CKCUClock.Bit.CRC		= 0;
	CKCUClock.Bit.PA		= 0;
	CKCUClock.Bit.PB		= 0;
	CKCUClock.Bit.PC		= 0;
	CKCUClock.Bit.PD		= 0;
	CKCUClock.Bit.I2C0		= 0;
	CKCUClock.Bit.I2C1		= 0;
	CKCUClock.Bit.SPI0		= 0;
	CKCUClock.Bit.SPI1		= 0;
	CKCUClock.Bit.USART0	= 1;
	CKCUClock.Bit.USART1	= 0;
	CKCUClock.Bit.UART0		= 1;
	CKCUClock.Bit.UART1		= 0;
	CKCUClock.Bit.AFIO		= 1;
	CKCUClock.Bit.EXTI		= 1;
	CKCUClock.Bit.SCI0		= 0;
	CKCUClock.Bit.SCI1		= 0;
	CKCUClock.Bit.I2S		= 0;
	CKCUClock.Bit.MCTM0		= 1;
	CKCUClock.Bit.WDT		= 1;
	CKCUClock.Bit.BKP		= 1;
	CKCUClock.Bit.GPTM0		= 0;
	CKCUClock.Bit.GPTM1		= 0;
	CKCUClock.Bit.BFTM0		= 1;
	CKCUClock.Bit.BFTM1		= 1;
	CKCUClock.Bit.CMP		= 0;
	CKCUClock.Bit.SCTM0		= 0;
	CKCUClock.Bit.SCTM1		= 0;
	CKCUClock.Bit.SCTM2		= 0;
	CKCUClock.Bit.SCTM3		= 0;
	CKCU_PeripClockConfig(CKCUClock, ENABLE);
#else
	CKCU_PeripClockConfig_TypeDef CKCUClock = {0};
	
	CKCUClock.Bit.PA = 1;
	CKCUClock.Bit.AFIO = 1;
	CKCU_PeripClockConfig(CKCUClock, ENABLE);
	CKCUClock.Bit.PB = 1;
	CKCUClock.Bit.AFIO = 1;
	CKCU_PeripClockConfig(CKCUClock, ENABLE);
	CKCUClock.Bit.PC = 1;
	CKCUClock.Bit.AFIO = 1;
	CKCU_PeripClockConfig(CKCUClock, ENABLE);
#endif
}

unsigned char versions[3];
void version_fun(void)
{
	versions[0] = MCU_VERSION_1;
	versions[1] = MCU_VERSION_2;
	versions[2] = MCU_VERSION_3;
}

int main(void)
{
	NVIC_SetVectorTable(NVIC_VECTTABLE_FLASH, IAP_APFLASH_START);
	//int i;
	//char *hello = "hello world!\r\n";
	printf("this AP1\n");
	version_fun();
	bt_protocol_init();			//协议串口的初始化

	clock_config();				//时钟配置
	uart0_init();				//B7.B8, TYBN1
	usart0_init();				//C4.C5, 调试用

	key_init();					//按键初始化
	gpio_init();				//LED初始化
	adc_init();					//ADC初始化
	gptm0_onfiguration();			//定时器初始化
	bftm_onfiguration();
	rtc_init();					//RTC初始化
	systick_init();
	
	bt_send_mcu_ver();


 #if 1	
	mcu_state = 1;							//第一次上电
  //heart_beat();							//第一条心跳
	//motor_pwr(PWR_ON);
	motor_pwr(PWR_OFF);
	SET_LED(SET);
   
    curtain_mode = 0;
    calibration_status = 0;
    calibration_operation = 0;
    full_running_time = 0;
    motor_current = 0;
#endif  
	
	
	while (1)
	{
		motor_current_test();		//电机电流
		motor_turn();						//正反转
		calibration_test();			//校验
		
		bt_uart_service();			//涂鸦协议处理
		//tybn1_ctrl();
		
		//过流保护
		//if(motor_current>0x190)		//400mA
		if(motor_current>protect_current)
		{
			motor_current = 0;
			motor_stop();
		}
	
	}

}
	
	
	
	
	
	
	